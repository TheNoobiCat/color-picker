!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).ColorPicker=e()}(this,(function(){"use strict";var t={color:"white"};const e=t=>t.match(/\((.*)\)/)[1].split(",").map(Number),o=t=>`hsla(${t.h}, ${t.s}%, ${t.l}%, ${t.a}%)`,a=t=>t.toFixed(2).replace(".00",""),s=t=>{const[e,o,a,s]=(t=>t.match(/\w\w/g))(t),[r,i,n]=[e,o,a].map((t=>parseInt(t,16)));return`rgba(${r},${i},${n},${s?(parseInt(s,16)/255).toFixed(2):1})`},r=t=>{var e,o=document.createElement("canvas").getContext("2d");return o.fillStyle=t,"#"==(e=o.fillStyle)[0]?e:i(e)},i=t=>{const[o,a,s,r]=e(t),i="#"+[o,a,s].map((t=>t.toString(16).padStart(2,"0"))).join("");return 3==t.length?i:i+Math.round(255*r).toString(16).padStart(2,"0")},n=t=>{let[o,s,r,i]=e(t);o/=255,s/=255,r/=255;let n=Math.max(o,s,r),l=Math.min(o,s,r),h=n-l,u=0,c=0,p=((n+l)/2).toPrecision(2);return h&&(c=p>.5?h/(2-n-l):h/(n+l),u=n==o?(s-r)/h+(s<r?6:0):u=n==s?(r-o)/h+2:(o-s)/h+4,u/=6),{h:a(360*u),s:a(100*c),l:a(100*p),a:a(100*i)}};function l({name:t,min:e=0,max:o=100,value:a}){return`<div class="range color-picker__${t}" title="${t}" style="--min:${e}; --max:${o}; --value:${a}; --text-value:'${a}'">\n            <input type="range" name="${t}" value="${a}" min="${e}" max="${o}">\n            <output></output>\n            <div class='range__progress'></div>\n          </div>`}function h(t){return`\n    <div class='color-picker__value'>\n      <input name='value' placeholder='CSS Color' value='${r(o(t))}'>\n      <button title='Revert' name="revert">↩</button>\n      <button title='Switch color format' name='format'>⭤</button>\n      <div></div>\n    </div>\n  `}var u=Object.freeze({__proto__:null,scope:function(){const{h:t,s:e,l:o,a:a}=this.color;return`\n    <div class='color-picker'>\n      ${l({name:"hue",value:t,max:"360"})}\n      ${l({name:"saturation",value:e})}\n      ${l({name:"lightness",value:o})}\n      ${l({name:"alpha",value:a})}\n      <output></output>\n      ${h(this.color)}\n    </div>\n  `},slider:l,value:h});function c(e){this.settings=Object.assign({},t,e),this.DOM={},this.setColor(this.getHSLA()),this.init()}return c.prototype={templates:u,getColorFormat:t=>"#"==t[0]?"hex":t.indexOf("hsl")?t.indexOf("rgb")?"":"rgba":"hsla",getHSLA(t=this.settings.color){let e;var o;return this.colorFormat=this.getColorFormat(t),t.indexOf("hsla")?(t=r(t),t=s(t),e=n(t)):(o=t,e=Object.assign([0,0,0,1],o.match(/\((.*)\)/)[1].split(",").map(((t,e)=>3!=e||t.includes("%")?parseFloat(t):100*parseFloat(t)))),e={h:e[0],s:e[1],l:e[2],a:e[3]}),e},onInput(t){const{name:e,value:o,type:a}=t.target;"range"==a&&(this.updateCSSVar(e,o),t.target.parentNode.style.setProperty("--value",o),t.target.parentNode.style.setProperty("--text-value",JSON.stringify(o)))},onValueChange(t){this.setColor(this.getHSLA(t.target.value)),this.updateAllCSSVars(),this.DOM.value.blur()},onButtonClick(t){const{name:e}=t.target;"format"==e&&this.swithFormat()},swithFormat(){switch(this.colorFormat){case"":case"hex":this.colorFormat="rgba";break;case"rgba":this.colorFormat="hsla";break;case"hsla":this.colorFormat="hex"}this.setCSSColor(),this.DOM.value.value=this.CSSColor},updateRangeSlider(t,e){const o=this.DOM.scope.querySelector(`input[name="${t}"]`);o&&(o.value=e,o.parentNode.style.setProperty("--value",e),o.parentNode.style.setProperty("--text-value",JSON.stringify(""+e).slice(0,6)))},setCSSColor(){this.CSSColor=r(o(this.color)),"rgba"==this.colorFormat?this.CSSColor=s(this.CSSColor):"hsla"==this.colorFormat&&(this.CSSColor=o(n(s(this.CSSColor)))),this.DOM.scope&&this.DOM.scope.setAttribute("data-color-format",this.colorFormat)},setColor(t){this.color=t,this.setCSSColor()},setColorPart(t,e){this.setColor({...this.color,[t[0]]:+e}),this.DOM.value.value=this.CSSColor},updateCSSVar(t,e){this.DOM.scope.style.setProperty("--"+t,e),this.setColorPart(t,e)},updateAllCSSVars(){const t=this.NamedHSLA(this.color);Object.entries(t).forEach((([t,e])=>{this.updateCSSVar(t,e),this.updateRangeSlider(t,e)}))},NamedHSLA:t=>({hue:t.h,saturation:t.s,lightness:t.l,alpha:t.a}),bindEvents(){this.DOM.scope.addEventListener("input",this.onInput.bind(this)),this.DOM.scope.addEventListener("click",this.onButtonClick.bind(this)),this.DOM.value.addEventListener("change",this.onValueChange.bind(this)),name="format"},init(){const t=this.templates.scope.call(this);var e;this.DOM.scope=(e=t,(new DOMParser).parseFromString(e.trim(),"text/html").body.firstElementChild),this.DOM.value=this.DOM.scope.querySelector('input[name="value"]'),this.updateAllCSSVars(),this.bindEvents()}},c}));
